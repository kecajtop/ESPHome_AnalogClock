substitutions:
  devicename: analog-clock
  upper_devicename: Analog-Clock
  friendly_name: Analog-Clock
  key: !secret key_esphome-analog-clock
  ota: !secret ota_sesphome-analog-clock
  IP: !secret IP_esphome-analog-clock
  fallback_pass: !secret fallback_pass_esphome-analog-clock
  num_leds: "60"
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  wifi_ssid_ha: !secret wifi_ssid_ha
  wifi_password_ha: !secret wifi_password_ha
  log_level: DEBUG

packages:
  wifi: !include common/wifi.yaml
  device_base: !include common/device_base.yaml
  generic: !include common/generic.yaml
  esp32_only: !include common/esp32_only.yaml

esphome:
  name: esphome-analog-clock
  friendly_name: ESPHome-Analog-Clock
  includes:
    - "include/clock.h"
  on_boot:
    # set "loading" effect while initializing
    priority: 500.0
    then:
      # enable clock effect after boot
      - light.turn_on:
          id: light_ring
          brightness: 100%
          effect: Sync

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
#logger:

# Enable Home Assistant API
#api:
#  encryption:
#    key: $key

#ota:
#  password: $ota

#wifi:
#  networks:
#  - ssid: !secret wifi_ssid
#    password: !secret wifi_password
#  - ssid: !secret wifi_ssid_ha
#    password: !secret wifi_password_ha
#  reboot_timeout: 172800s
#  use_address: $IP

  # Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: "Esphome-Analog-Clock"
#    password: $fallback_pass

#captive_portal:

#web_server:
#  port: 80

globals:
  - id: clock_brightness
    type: int
    restore_value: yes
    initial_value: '255'

  - id: clock_indicators_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'

  - id: clock_seconds_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'

  - id: wide_hour_hand_enabled
    type: bool
    restore_value: yes
    initial_value: 'false'

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Berlin
    on_time_sync:
      then:
        - light.turn_on:
            id: light_ring
            effect: Clock

switch:
#  - <<: !include common/switch/restart.yaml
  - platform: template
    name: "Clock Indicators"
    icon: mdi:progress-clock
    lambda: !lambda |-
      return id(clock_indicators_enabled);
    turn_on_action:
      globals.set:
        id: clock_indicators_enabled
        value: 'true'
    turn_off_action: 
      globals.set:
        id: clock_indicators_enabled
        value: 'false'

  - platform: template
    name: "Clock Seconds"
    icon: mdi:update
    lambda: !lambda |-
      return id(clock_seconds_enabled);
    turn_on_action:
      globals.set:
        id: clock_seconds_enabled
        value: 'true'
    turn_off_action:
      globals.set:
        id: clock_seconds_enabled
        value: 'false'

  - platform: template
    name: "Wide Hour Hand"
    lambda: !lambda |-
      return id(wide_hour_hand_enabled);
    turn_on_action:
      globals.set:
        id: wide_hour_hand_enabled
        value: 'true'
    turn_off_action:
      globals.set:
        id: wide_hour_hand_enabled
        value: 'false'

light:
  - id: light_ring
    internal: False
    platform: neopixelbus
    type: GRB
    variant: WS2812X # WS2812X
    pin: GPIO04 #GPIO23
    num_leds: "${num_leds}"
    #method: ESP8266_DMA
    name: "NeoPixel Light"
    color_correct: [50%, 50%, 50%]
    effects:
      - addressable_lambda:
          name: "Clock"
          update_interval: 32ms
          lambda: |-
            auto time = id(sntp_time).now();
            int offset = 0;
            static Color clock_ring_colors [${num_leds}];
            update_clock_hands(it, time, clock_ring_colors, offset);
      - addressable_scan:
          name: Sync
          move_interval: 100ms
          scan_width: 1
